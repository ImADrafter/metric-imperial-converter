"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _assertionAnalyser = _interopRequireDefault(require("./assertion-analyser"));

var _mocha = _interopRequireDefault(require("mocha"));

var _fs = require("fs");

var _events = require("events");

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/*
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *       DO NOT EDIT THIS FILE
 *       For FCC testing purposes!
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */
// import { EventEmitter } from "events";
var mocha = new _mocha["default"]();
var testDir = "./tests"; // Add each .js file to the mocha instance

(0, _fs.readdirSync)(testDir).filter(function (file) {
  return (// Only keep the .js files
    file.substr(-3) === ".js"
  );
}).forEach(function (file) {
  mocha.addFile(_path["default"].join(testDir, file));
});
var emitter = new _events.EventEmitter();

emitter.run = function () {
  var tests = [];
  var context = "";
  var separator = " -> "; // Run the tests.

  try {
    var runner = mocha.ui("tdd").run().on("test end", function (test) {
      // remove comments
      var body = test.body.replace(/\/\/.*\n|\/\*.*\*\//g, ""); // collapse spaces

      body = body.replace(/\s+/g, " ");
      var obj = {
        title: test.title,
        context: context.slice(0, -separator.length),
        state: test.state,
        // body: body,
        assertions: (0, _assertionAnalyser["default"])(body)
      };
      tests.push(obj);
    }).on("end", function () {
      emitter.report = tests;
      emitter.emit("done", tests);
    }).on("suite", function (s) {
      context += s.title + separator;
    }).on("suite end", function (s) {
      context = context.slice(0, -(s.title.length + separator.length));
    });
  } catch (e) {
    throw e;
  }
};

var _default = emitter;
/*
 * Mocha.runner Events:
 * can be used to build a better custom report
 *
 *   - `start`  execution started
 *   - `end`  execution complete
 *   - `suite`  (suite) test suite execution started
 *   - `suite end`  (suite) all tests (and sub-suites) have finished
 *   - `test`  (test) test execution started
 *   - `test end`  (test) test completed
 *   - `hook`  (hook) hook execution started
 *   - `hook end`  (hook) hook complete
 *   - `pass`  (test) test passed
 *   - `fail`  (test, err) test failed
 *   - `pending`  (test) test pending
 */

exports["default"] = _default;